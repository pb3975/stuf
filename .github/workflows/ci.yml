name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov httpx requests
        
    - name: Create test database
      run: |
        mkdir -p test_data
        export DATABASE_URL="sqlite:///./test_inventory.db"
        
    - name: Run backend tests
      env:
        DATABASE_URL: sqlite:///./test_inventory.db
        GEMINI_API_KEY: test_key_for_ci
      run: |
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=term-missing || true
        
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Run frontend linting
      working-directory: ./frontend
      run: npm run lint
      
    - name: Run frontend type checking
      working-directory: ./frontend
      run: npm run type-check || true
      
    - name: Run frontend tests
      working-directory: ./frontend
      run: npm run test || true
      
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
      
    - name: Upload frontend coverage
      if: matrix.node-version == 18
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        
    - name: Run safety check (Python dependencies)
      run: |
        pip install -r requirements.txt
        safety check
        
    - name: Run bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt
        
    - name: Set up Node.js for frontend security scan
      uses: actions/setup-node@v4
      with:
        node-version: 18
        
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Run npm audit
      working-directory: ./frontend
      run: npm audit --audit-level moderate

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_stuf
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install backend dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install psycopg2-binary
        
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
      
    - name: Run integration tests with SQLite
      env:
        DATABASE_URL: sqlite:///./test_inventory.db
        GEMINI_API_KEY: test_key_for_ci
      run: |
        python -m pytest tests/integration/ -v
        
    - name: Run integration tests with PostgreSQL
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_stuf
        GEMINI_API_KEY: test_key_for_ci
      run: |
        python -m pytest tests/integration/ -v

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Create Dockerfile for testing
      run: |
        cat > Dockerfile << 'EOF'
        FROM python:3.11-slim
        
        WORKDIR /app
        
        # Install system dependencies
        RUN apt-get update && apt-get install -y \
            gcc \
            && rm -rf /var/lib/apt/lists/*
        
        # Copy requirements and install Python dependencies
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt
        
        # Copy application code
        COPY . .
        
        # Create necessary directories
        RUN mkdir -p uploads qrcodes
        
        # Expose port
        EXPOSE 8000
        
        # Run the application
        CMD ["python", "main.py"]
        EOF
        
    - name: Build Docker image
      run: |
        docker build -t stuf:test .
        
    - name: Test Docker image
      run: |
        docker run --rm -d --name stuf-test -p 8000:8000 \
          -e DATABASE_URL=sqlite:///./test_inventory.db \
          -e GEMINI_API_KEY=test_key \
          stuf:test
        sleep 10
        curl -f http://localhost:8000/docs || exit 1
        docker stop stuf-test

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install code quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy
        pip install -r requirements.txt
        
    - name: Check code formatting with Black
      run: |
        black --check --diff .
        
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .
        
    - name: Run flake8 linting
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Run mypy type checking
      run: |
        mypy main.py --ignore-missing-imports

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust
        
    - name: Create performance test
      run: |
        cat > locustfile.py << 'EOF'
        from locust import HttpUser, task, between
        
        class StufUser(HttpUser):
            wait_time = between(1, 3)
            
            def on_start(self):
                """Setup test data"""
                pass
                
            @task(3)
            def get_items(self):
                self.client.get("/items/")
                
            @task(2)
            def get_categories(self):
                self.client.get("/categories/")
                
            @task(1)
            def get_docs(self):
                self.client.get("/docs")
        EOF
        
    - name: Start application
      env:
        DATABASE_URL: sqlite:///./test_inventory.db
        GEMINI_API_KEY: test_key
      run: |
        python main.py &
        sleep 5
        
    - name: Run performance tests
      run: |
        locust --headless --users 10 --spawn-rate 2 --run-time 30s --host http://localhost:8000 